Dirac software development practices
====================================

Sourceforge Developers forum
----------------------------
The Developers forum is where Dirac core developers plan and coordinate
changes to Dirac.  All API changes, new features and implementation
difficulties are announced and discussed here.

Examples of changes which should be announced in the Developers forum:

  - Pic API change: return bool instead of void for ReadNextFrame
  - Pic API change: most methods can now throw ErrorState objects

Changes which are small in scope and unlikely to affect developers
should not be announced on the forum.  Changes which touch
many files can fall into this category - for example

  - Fixed inconsistent CRLF line-endings to be LF.
  - Fixed "use of uninitialised variable" cases found by gcc.
  - Fixed memory leak in all instantiations of Pic (found by valgrind).
  - Add feature test for stdint.h to be portable to Solaris.

Developers should 'monitor' the forums by going to the forum page and
clicking 'Monitor this forum'.  Any new message will then be emailed
to their username@users.sourceforge.net email address.
  http://sourceforge.net/forum/forum.php?forum_id=353620


Mailing lists
--------------
Developers should subscribe to the dirac-announce and dirac-commits
mailing lists.  dirac-announce is used to announce new releases and
dirac-commits is sent mail automatically for every commit.


CVS log messages
----------------
Always indicate why the change is necessary in addition to a succinct summary
of what as changed.  As the number of developers increases it becomes
increasingly difficult for developers to understand the changes going on in
areas they are not familiar with.  If the changes relate to an API change
developers may not realise this if it is not mentioned in the log message
as the reason for the change.

E.g.
  Bad
  ---
  - Added gamma parameter
  - Replace stricmp with strcasecmp

  Good
  ----
  - Added gamma parameter to record more accurate data on source material
  - Enhanced portability: stricmp replaced by strcasecmp (the POSIX standard) 


Software practices
------------------
Portability
  This project aims to be as portable as possible and to that end follows the
  following standards:
    POSIX 1003.1 - System Interfaces volume (XSH) & Threads
    ISO C99 (1999)
    ISO C++ (1998)
  The only exception to this practice is for the Microsoft Visual C++ compiler
  which continues to fall short of all the above standards.  Where MS VC++
  is incompatible with the standards, experiment is often necessary to find
  an alternative usage which works under MS VC++.  Use of the _MSC_VER macro
  in conditional compilation is the accepted way to accommodate such
  differences.

Source code formatting
  Source code uses TABs with a spacing of 4.

Naming practice
  Class and function names start with a capital then use lowercase with multi-
  word names using a capital for each new word.  E.g. MultiWordName

  Local variables are lowercase and use underscores to separate words.

  Class member variables are lowercase with a leading underscore.

(inspired by http://docs.kde.org/en/3.2/kdemultimedia/artsbuilder/coding-standards.html)

Testing with "make check"
  Developers should aim to have all the regression tests succeed.  If a
  developer anticipates breaking the tests (while a significant body of work
  is being undertaken) this must be announced on the Developer Forum, and
  the fixing of the tests would be coordinated there.

  Developers should also aim to have good test coverage especially when
  adding functionality.  When adding a new feature, expect to be asked
  "Where's the test?"


Profiling & optimisation
------------------------
Dirac is alpha software so developers cannot expect optimisation improvements
to survive algorithm improvements or code refactoring and restructuring.  That
being said, the Dirac maintainers would like to encourage profiling analysis
and portable and modular optimisation.  Developers are encouraged to share
their profiling analysis techniques and results.  The following guidelines
should be followed:
  - Any optimisation patch must be accompanied by at least a summary of
    profile analysis and timing results for a range of video material.  There
	must be sufficient information for other developers to reproduce the
	results.
  - A good example of modular and portable optimisations for MMX/SSE (x86),
    ALTIVEC (PowerPC), VIS (SPARC) and Alpha can be found in libmpeg2's
	motion compensation code:
	  mpeg2dec/libmpeg2/motion_comp.c
	  mpeg2dec/libmpeg2/motion_comp_alpha.c
	  mpeg2dec/libmpeg2/motion_comp_altivec.c
	  mpeg2dec/libmpeg2/motion_comp_mmx.c
	  mpeg2dec/libmpeg2/motion_comp_vis.c
  - For MMX/SSE/SSE2 optimisations developers must use a compiler-portable
    macro approach such as that adopted by libmpeg2.  The Dirac maintainers
	plan to use identical macro names to those found in
	  http://cvs.sourceforge.net/viewcvs.py/libmpeg2/mpeg2dec/include/mmx.h
	  http://cvs.sourceforge.net/viewcvs.py/libmpeg2/mpeg2dec/include/sse.h
  - x86-specific optimisations need not be limited to MMX since SSE is
    readily available on PentiumIII and AMD Athlons.  SSE2 optimisation is
	encouraged since it becoming more commonly available (on Pentium4,
	Athlon64 and Opteron), but take care to use a portable 16byte memory
	alignment technique.


Line-endings
------------
All source code and documentation will have LF line-endings, include makefiles
and scripts.  The only exception will be for .dsp and .dsw (and any other
WIN32 specific) files which will not function under MS VC++ unless they use
CR-LF line-endings.


Binary files in CVS
-------------------
CVS will modify files during checkin and checkout unless they are tagged as
binary.  The modifications include translation of CR-LF <-> LF (depending on
the OS of the CVS client) and expansion of CVS keywords such as $Id and $Log.

Files which must not be modified in this way must be tagged as binary either
using the add command or admin command:
  cvs add -kb fig1.jpg
  cvs admin -kb fig1.jpg  (for files already in CVS)

MS VC++ project files, such as .dsp and .dsw, fall into this category since
they do not function if their line-endings are not CR-LF.
